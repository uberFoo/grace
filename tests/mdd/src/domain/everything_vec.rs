//! Everything Domain
//!
//! This file was generated by: `sarzak new "everything"`.
use tracy_client::Client;
use uuid::{uuid, Uuid};

pub mod store;
pub mod types;

pub use store::ObjectStore;
pub use types::*;

// everything
pub const UUID_NS: Uuid = uuid!("68f2a75c-4397-5ee0-9bae-86b95bd1b866");

#[cfg(test)]
mod tests {
    use super::*;

    use everything::Everything;
    use rando_object::RandoObject;
    // use store::ObjectStore;

    #[test]
    fn test_structs() {
        Client::start();

        // Test struct creation ✅
        let r = RandoObject {
            id: 0,
            name: "rando".to_owned(),
        };

        // Test derive option ✅
        format!("{:?}", r);

        // Test struct creation ✅
        let e = Everything {
            id: 0,
            s_string: "everything".to_owned(),
            float: 42.0,
            bool: true,
            int: 42,
            rando: r.id,
        };

        // Test derive option ✅
        format!("{:?}", e);
    }

    #[test]
    fn test_new() {
        Client::start();

        let mut store = ObjectStore::new();

        let r = RandoObject::new("rando".to_owned(), &mut store);
        let e = Everything::new(true, 42.0, 42, "string".to_owned(), &r, &mut store);

        assert_eq!(e.borrow().s_string, "string".to_owned());
        assert_eq!(e.borrow().float, 42.0);
        assert_eq!(e.borrow().bool, true);
        assert_eq!(e.borrow().int, 42);
        assert_eq!(e.borrow().rando, r.borrow().id);

        let r_prime = store.exhume_rando_object(r.borrow().id).unwrap();
        assert_eq!(r, r_prime);

        let e_prime = store.exhume_everything(e.borrow().id).unwrap();
        assert_eq!(e, e_prime);
    }

    #[test]
    fn test_rel_nav() {
        Client::start();

        let mut store = ObjectStore::new();

        let r = RandoObject::new("rando".to_owned(), &mut store);
        let e = Everything::new(true, 42.0, 42, "string".to_owned(), &r, &mut store);

        let r_prime = e.borrow().r1_rando_object(&store);
        assert_eq!(vec![r.clone()], r_prime);

        let e_prime = r.borrow().r1_everything(&store);
        assert_eq!(vec![e], e_prime);
    }
}
